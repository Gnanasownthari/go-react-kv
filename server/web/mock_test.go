// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package web is a generated GoMock package.
package web

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/iyabchen/go-react-kv/server/model"
	reflect "reflect"
)

// MockPairRepo is a mock of PairRepo interface
type MockPairRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPairRepoMockRecorder
}

// MockPairRepoMockRecorder is the mock recorder for MockPairRepo
type MockPairRepoMockRecorder struct {
	mock *MockPairRepo
}

// NewMockPairRepo creates a new mock instance
func NewMockPairRepo(ctrl *gomock.Controller) *MockPairRepo {
	mock := &MockPairRepo{ctrl: ctrl}
	mock.recorder = &MockPairRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPairRepo) EXPECT() *MockPairRepoMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockPairRepo) GetOne(ctx context.Context, id string) (*model.Pair, error) {
	ret := m.ctrl.Call(m, "GetOne", ctx, id)
	ret0, _ := ret[0].(*model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockPairRepoMockRecorder) GetOne(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockPairRepo)(nil).GetOne), ctx, id)
}

// GetAll mocks base method
func (m *MockPairRepo) GetAll(ctx context.Context) ([]*model.Pair, error) {
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPairRepoMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPairRepo)(nil).GetAll), ctx)
}

// DeleteOne mocks base method
func (m *MockPairRepo) DeleteOne(ctx context.Context, id string) error {
	ret := m.ctrl.Call(m, "DeleteOne", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockPairRepoMockRecorder) DeleteOne(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockPairRepo)(nil).DeleteOne), ctx, id)
}

// DeleteAll mocks base method
func (m *MockPairRepo) DeleteAll(ctx context.Context) error {
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockPairRepoMockRecorder) DeleteAll(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockPairRepo)(nil).DeleteAll), ctx)
}

// Create mocks base method
func (m *MockPairRepo) Create(ctx context.Context, p *model.Pair) error {
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockPairRepoMockRecorder) Create(ctx, p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPairRepo)(nil).Create), ctx, p)
}

// Update mocks base method
func (m *MockPairRepo) Update(ctx context.Context, id, key, value string) error {
	ret := m.ctrl.Call(m, "Update", ctx, id, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPairRepoMockRecorder) Update(ctx, id, key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPairRepo)(nil).Update), ctx, id, key, value)
}
